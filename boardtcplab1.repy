# global variables
mycontext['boardcontent']=[]
mycontext['availableboard']=[]

#this function is start when a tcp connection arrives
#it send a message to display the blackboard or it register the new board content
def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  msgheader = sockobj.recv(1024) # Receive message,
  contentboard = mycontext['boardcontent']
  # React depending on message type: HTTP GET or POST, or some other type of communication.
  if msgheader.startswith( 'GET' ):
   #write the content of board in a html string 
   htmlresponse = createhtml()
   sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
   "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
   stopcomm(thiscommhandle)   
  elif msgheader.startswith( 'POST' ):
    #get the content
    postcontent=msgheader.split("comment=")
    #add it to the board content
    contentboard.append(postcontent[-1])
    mycontext['boardcontent'] = contentboard
    resp=createhtml()
    #send the answer
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(resp), resp))
    stopcomm(thiscommhandle)
    #update the board content of every register vessels
    #Don't update your board content: check ip 
    for ipvessel in mycontext['availableboard']:
        if(getmyip()!=ipvessel):   
            #send the new string with an tcp message to update the board 
            #content of the other vessels
            try:
                sock = openconn(ipvessel,63131)
                sock.send(postcontent[-1])
                sock.close()
            except:
                print'oops something goes wrong during the connection between ' + getmyip()+' and '+ipvessel
  else:
        mycontext['boardcontent'].append(msgheader)
        
#this function return the html string which display the web site with the board content  
def createhtml():
    htmlstring=''
    for word in mycontext['boardcontent']:
        htmlstring+=str(word)+'<br>'
    resp="""<html><head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <title>Blackboard Group13</title>
    </head>
    <body>
    <h2> Board Content</h2>
    <p>"""+htmlstring+"""</p>
    <br>
    <h3>Submit to board<h3>
    <textarea rows="4" cols="50" name="comment" form="usrform"></textarea>
    <form action="" id="usrform" method="post">
    <input type="submit">
    </form>
    </body></html>"""
    return resp

#this function get the ip adress of all the other vessel in the system. this IP adress must be save in ipAdress.txt
#the file ipAdress.txt must have one IP adress per line.  
def getipothervessels():
    file = open('ipAdress.txt','r')
    ip=[]
    for line in file:
        ip.append(line.replace('\n',''))
    file.close()
    mycontext['availableboard']=ip
    
if callfunc == 'initialize':
  if len(callargs) > 1:
    raise Exception("Too many call arguments")

  # Running remotely (assuming that we pass input argument only remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  elif len(callargs) == 1:
    getipothervessels() # we get the ip of the other vessels.
    port = int(callargs[0])
    ip = getmyip()

  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call board
  else:
    port = 12345
    ip = '127.0.0.1'
  listencommhandle = waitforconn(ip,port,board)