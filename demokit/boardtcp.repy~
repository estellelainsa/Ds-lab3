# -*- coding: utf-8 -*-
# global variables
mycontext['boardcontent']={} #Dict of type (sequence number, post value)
mycontext['availableboard']=[]
mycontext['seqnumber']=0 #sequence number of each post

#this function is start when a tcp connection arrives
#it send a message to display the blackboard or it register the new board content
def board(ip, port, sockobj, thiscommhandle, listencommhandle):  
    msgheader = sockobj.recv(1024) # Receive message,
    print msgheader
    # React depending on message type: HTTP GET or POST, or some other type of communication.
    if msgheader.startswith( 'GET' ):
        #write the content of board in a html string 
        htmlresponse = createhtml()
        sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
        "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
        stopcomm(thiscommhandle)   
    
    elif msgheader.startswith( 'POST' ):
        #get the content
        postcontent=msgheader.split("comment=")
        #add it with its sequence number to the board content
        thiscontent = str(mycontext['seqnumber'])+'\r\n'+postcontent[-1]+'\r\n'
        updateboardcontent(postcontent[-1],mycontext['seqnumber'])
        print 'back'
        resp=createhtml()
        #send the answer
        sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
        "Content-length: %i\r\n\r\n%s" % (len(resp), resp))
        stopcomm(thiscommhandle)
        #update the board content of every register vessels
        #Don't update your board content: check ip 
        for ipvessel in mycontext['availableboard']:
            if(getmyip()!=ipvessel):   
                #send the new string with an tcp message to update the board 
                #content of the other vessels
                print ipvessel
                try:
                    sock = openconn(ipvessel,63131)
                    sock.send('UDB\r\n'+thiscontent+getmyip())
                    sock.close()
                except e:
                    print str(e)
                    print 'oops something goes wrong during the connection between ' + getmyip()+' and '+ipvessel
    
    elif msgheader.startswith( 'UDB' ):
        print 'udb'
        msg= msgheader.split('\r\n')
        stopcomm(thiscommhandle)
        sequencenumber=int(msg[1])
        postcontent=msg[2]
        updateboardcontent(postcontent,sequencenumber)
    
    else:
        stopcomm(thiscommhandle)
        print 'wrong message'

#this function return the html string which display the web site with the board content  
def createhtml():
    htmlstring=''
    #We print the board content following the sequence number order
    sortedsequencenumber=mycontext['boardcontent'].keys()
    sortedsequencenumber.sort()
    for key in sortedsequencenumber:
        htmlstring+=str(key)+'  '+str(mycontext['boardcontent'][key])+'<br>'
    resp="""<html><head>
    <meta content="text/html; charset=utf-8" http-equiv="content-type">
    <title>Blackboard Group13</title>
    </head>
    <body>
    <h2> Board Content</h2>
    <p>"""+htmlstring+"""</p>
    <br>
    <h3>Submit to board<h3>
    <textarea rows="4" cols="50" name="comment" form="usrform"></textarea>
    <form action="" id="usrform" method="post">
    <input type="submit">
    </form>
    </body></html>"""
    return resp
    
#update boardcontent
def updateboardcontent(postcontent,sequencenumber):
    if int(sequencenumber) in mycontext['boardcontent']:
        #decide the rules !! and send the new board content to every vessels -> they can update theirseqnumber and their dict
        print 'concurent submit'
    else: #add the the post to the board content
        mycontext['boardcontent'][sequencenumber]=postcontent
        mycontext['seqnumber']+=1
        print 'seqnumb = '+str(mycontext['seqnumber'])

#this function get the ip adress of all the other vessel in the system. this IP adress must be save in ipAdress.txt
#the file ipAdress.txt must have one IP adress per line.  
def getipothervessels():
    file = open('ipAdress.txt','r')
    ip=[]
    for line in file:
        ip.append(line.replace('\n',''))
    file.close()
    mycontext['availableboard']=ip
    
if callfunc == 'initialize':
    if len(callargs) > 1:
        raise Exception("Too many call arguments")

    # Running remotely (assuming that we pass input argument only remotely):
    # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
    elif len(callargs) == 1:
        getipothervessels() # we get the ip of the other vessels.
        port = int(callargs[0])
        ip = getmyip()

    # Running locally:
    # whenever we get a connection on 127.0.0.1:12345 we'll call board
    else:
        port = 12345
        ip = '127.0.0.1'
    listencommhandle = waitforconn(ip,port,board)